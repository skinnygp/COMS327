
heap.c,798
#undef min4,39
struct heap_node 6,51
#define splice_heap_node_lists(16,212
#define insert_heap_node_in_list(25,524
#define remove_heap_node_from_list(32,748
void print_heap_node(37,881
void print_heap(53,1203
void print_heap_node_list(70,1505
void heap_init(86,1704
void heap_node_delete(96,1940
void heap_delete(114,2244
heap_node_t *heap_insert(heap_insert125,2409
void *heap_peek_min(heap_peek_min145,2725
static void heap_link(150,2801
static void heap_consolidate(164,3123
void *heap_remove_min(heap_remove_min205,4056
int heap_combine(240,4590
static void heap_cut(269,5241
static void heap_cascading_cut(283,5522
int heap_decrease_key(297,5748
int heap_decrease_key_no_replace(311,5990
int32_t compare(335,6564
char *print_int(print_int340,6663
int main(349,6781

heap.h,111
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
} heap_t;18,301

macros.h,611
# define MACROS_H2,17
#  define dprintf(16,213
#  define dfprintf(17,256
#  define dprintf(19,320
#  define dfprintf(20,343
# define fieldwidth(23,382
# define exit(37,1201
# define fopen(42,1441
#  define malloc(76,3348
#  define calloc(92,4430
#  define strdup(107,5435
#  define free(117,6055
# define swap(125,6303
# define memswap(131,6415
# define structdup(137,6543
# define datacmp(144,6927
# define max2(153,7400
# define min2(160,7576
# define max 167,7752
# define min 168,7770
# define max3(170,7789
# define min3(171,7830
# define frand(173,7872
# define structdup(180,7984

rlg327.c,2329
# define rand_under(16,341
# define rand_range(20,484
typedef struct corridor_path 22,558
} corridor_path_t;27,661
typedef struct monsters_path 29,681
} monsters_path;34,784
typedef enum dim 36,802
  dim_x,37,821
  dim_y,38,830
  num_dims39,839
} dim_t;40,850
typedef int16_t pair_t[pair_t42,860
#define DUNGEON_X 44,895
#define DUNGEON_Y 45,930
#define MIN_ROOMS 46,965
#define MAX_ROOMS 47,999
#define ROOM_MIN_X 48,1033
#define ROOM_MIN_Y 49,1066
#define ROOM_MAX_X 50,1099
#define ROOM_MAX_Y 51,1133
#define SAVE_DIR 52,1167
#define DUNGEON_SAVE_FILE 53,1208
#define DUNGEON_SAVE_SEMANTIC 54,1249
#define DUNGEON_SAVE_VERSION 55,1295
#define mappair(57,1330
#define mapxy(58,1387
#define hardnesspair(59,1422
#define hardnessxy(60,1489
typedef enum __attribute__ ((__packed__)) terrain_type 62,1535
  ter_debug,63,1592
  ter_wall,64,1605
  ter_wall_immutable,65,1617
  ter_floor,66,1639
  ter_floor_room,67,1652
  ter_floor_hall,68,1670
  ter_pc,69,1688
} terrain_type_t;70,1698
typedef struct room 72,1717
} room_t;75,1773
typedef struct dungeon 77,1784
} dungeon_t;90,2543
static uint32_t in_room(92,2557
static int32_t corridor_path_cmp(108,2948
static void dijkstra_corridor(112,3098
static void dijkstra_corridor_inv(211,6833
#define hardnesspair_inv(264,8153
static int connect_two_rooms(314,10790
static int create_cycle(333,11442
static int connect_rooms(375,13007
int gaussian[gaussian388,13200
typedef struct queue_node 396,13356
} queue_node_t;399,13423
static int smooth_hardness(401,13440
static int empty_dungeon(559,17716
static int place_rooms(578,18092
static int make_rooms(642,20617
int gen_dungeon(670,21379
void render_dungeon(680,21501
void delete_dungeon(712,22165
void init_dungeon(717,22222
int write_dungeon_map(723,22298
int write_rooms(736,22527
uint32_t calculate_dungeon_size(756,22946
int makedirectory(763,23168
int write_dungeon(798,23804
int read_dungeon_map(857,25201
int read_rooms(880,25799
int calculate_num_rooms(910,26568
int read_dungeon(918,26808
int read_pgm(992,28536
static int place_pc(1075,30661
static int place_pc_test(1090,30941
static int find_pc_position_x(1097,31066
static int find_pc_position_y(1115,31371
static int show_tunnel_distance(1133,31680
void usage(1146,31750
int main(1156,31960
